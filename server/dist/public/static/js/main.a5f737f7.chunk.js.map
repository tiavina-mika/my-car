{"version":3,"sources":["actions/app.ts","utils/constants.ts","utils/utils.ts","actions/utils.ts","actions/api.ts","actions/auth.ts","components/BrowserPageDetails.tsx","components/Link.tsx","components/Button.tsx","components/buttons/SubmitButton.tsx","components/form/FormField.tsx","containers/auth/LoginForm.tsx","containers/auth/SignupForm.tsx","containers/auth/Auth.tsx","hooks/useIsActualPage.ts","components/CustomCard.tsx","containers/edit-profile/ProfileForm.tsx","containers/edit-profile/EditProfile.tsx","actions/cars.ts","hooks/userLoadCars.ts","hooks/useLoadData.ts","actions/comments.ts","components/Avatar.tsx","containers/comments/CommentForm.tsx","containers/comments/ButtonsAction.tsx","containers/comments/Comment.tsx","containers/comments/NotLoggedInMessage.tsx","containers/comments/Comments.tsx","containers/cars/Car.tsx","containers/cars/Cars.tsx","containers/Home.tsx","containers/Logout.tsx","components/Menu.tsx","components/SnackbarContentWrapper.tsx","containers/Main.tsx","MainRoute.tsx","hooks/useAuth.ts","Routes.tsx","reportWebVitals.ts","store.ts","utils/theme.ts","index.tsx","reducers/app.ts","reducers/index.ts","reducers/users.ts","reducers/cars.ts"],"names":["handleErrorMessage","error","code","message","showError","errorOrMessage","dispatch","console","type","showMessage","variant","showResponseError","result","goToHome","push","projectNameUpper","toUpperCase","LOCAL_HOSTNAME","PROD_URL","LOCAL_ENDPOINT","LOGIN_PATHNAME","SIGNUP_PATHNAME","RegExp","actionWithLoader","thunkOrPromise","getState","a","getUrl","isEndPoint","window","LOCAL","location","port","getUserNameFirstLetter","user","name","charAt","instance","axios","create","baseURL","authorized","retrieveUserFromLocalStorage","headers","token","responseBody","response","data","requests","url","config","get","then","body","post","put","delete","CAR_API","getCars","getCar","id","createCar","updateCar","deleteCar","COMMENT_API","carId","AUTH_API","goToLogin","storedUser","localStorage","getItem","JSON","parse","loginSuccess","currentUser","getCurrentUser","BrowserPageDetails","title","useStyles","makeStyles","theme","createStyles","link","textDecoration","leftText","marginLeft","spacing","rightText","marginRight","Link","textBefore","textAfter","content","href","rootClassName","className","isPreventDefault","children","classes","onClick","event","preventDefault","undefined","clsx","Typography","button","textTransform","fontWeight","borderRadius","outlined","borderColor","outlinedError","palette","main","color","opacity","Button","disabled","text","startIcon","fullWidth","muiClasses","submitButton","marginTop","fontSize","SubmitButton","label","marginBottom","asterix","FormField","labelClassName","inputClassName","options","errorMessage","errors","register","required","placeholder","defaultValue","FormControl","margin","root","FormLabel","TextField","LoginForm","useDispatch","useForm","handleSubmit","formState","onSubmit","values","setItem","stringify","login","SignupForm","signup","backgroundColor","secondary","height","card","minWidth","maxWidth","boxShadow","padding","width","secondaryButton","actions","composes","Auth","useLocation","isLoginPage","pathname","useMemo","useIsActualPage","useSelector","getError","useEffect","auth","signupTitle","browserTitle","pageTitle","labelLink","form","Box","display","justifyContent","alignItems","Card","CardContent","gutterBottom","component","FormHelperText","mt","header","borderBottom","grey","borderTop","action","buttons","okBtn","fullScreenContainer","fullScreenContent","maxHeight","actionButtonLeft","order","CustomCard","elevation","fullScreen","titleClassName","contentClassName","okAction","okLabel","cancelAction","otherHeaderActionButtons","withActionButtons","actionClassName","actionButtonPosition","cancelLabel","onHeaderPrimaryClick","headerPrimaryLabel","okBtnClassName","okBtnVariant","actionItems","px","CardHeader","CardActions","input","borderWidth","border","flex","ProfileForm","onSave","reset","email","EditProfile","editProfile","loadCars","cars","Array","isArray","loadCarsThunk","useLoadCars","getData","loadData","useLoadData","updateCommentThunk","car","updatedCar","deleteCommentThunk","newCars","filter","p","size","fontFamily","Avatar","avatar","CommentForm","primary","firstButton","paddingLeft","ButtonActions","comment","useState","open","setOpen","store","useStore","toggle","useCallback","prev","handleDelete","handleEdit","_id","mb","postedBy","inline","Comment","ListItem","ListItemAvatar","ListItemText","updatedAt","NotConnectedMessage","pl","background","paper","paddingBottom","paddingTop","Comments","comments","onAdd","currrentUser","List","subheader","ListSubheader","length","map","index","Divider","media","tag","Car","CardMedia","image","style","shortDesc","year","distance","fuel","gearbox","info","borderLeft","createComment","Cars","Home","Logout","removeItem","logout","deconnect","appBar","logoContainer","flexGrow","breakpoints","up","logo","search","position","shape","fade","searchIcon","pointerEvents","top","inputRoot","inputInput","transition","transitions","loginButton","avatarLink","opactity","Menu","trigger","useScrollTrigger","Slide","appear","direction","in","AppBar","Toolbar","InputBase","inputProps","success","warning","icon","iconVariant","variantIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","SnackbarContentWrapper","onClose","other","Icon","SnackbarContent","aria-describedby","IconButton","aria-label","backdrop","zIndex","drawer","menuButton","easing","sharp","duration","leavingScreen","Main","backdropOpened","setBackdropOpened","getTitle","getMessage","getMessageVariant","loading","getLoading","setTimeout","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Backdrop","CircularProgress","MainRoute","Component","rest","useAuth","Routes","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","routerMiddleware","history","thunk","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","createMuiTheme","blue","hostName","hostname","indexOf","require","default","wrapper","document","getElementById","jss","preset","generateClassName","createGenerateClassName","ReactDOM","render","StylesProvider","ThemeProvider","INITIAL_STATE","state","errorIfNotFound","appReducer","users","userReducer","createBrowserHistory","appReducers","app","carReducer","combineReducers","router","connectRouter","errorMessageIfNotFound","Error","split","reduce","res","prop","count"],"mappings":"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","file":"static/js/main.a5f737f7.chunk.js","sourcesContent":["import { push } from 'connected-react-router';\n\nimport {  AppThunk, AppDispatch } from '../store';\nimport {  ApiResponseError, Variant } from '../types/app.d';\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nconst CONNECTION_FAILED = 'Votre connexion semble dégradée, vérifiez-là puis actualisez la page.';\n/**\n *\n * @param {object} error\n */\nexport const handleErrorMessage = (error: any): string => {\n  switch (error.code) {\n  case 100:\n    return CONNECTION_FAILED;\n  default:\n    return error.message;\n  }\n};\n\nexport const showError = (errorOrMessage: any): AppDispatch => (dispatch: any): void => {\n  console.error(errorOrMessage);\n  dispatch({\n    type: 'ERROR',\n    message: typeof errorOrMessage === 'string' ? errorOrMessage : handleErrorMessage(errorOrMessage),\n  });\n};\n\ninterface Close {\n  type: 'CLOSE_ERROR' | 'CLOSE_MESSAGE';\n}\nexport const closeError = (): Close => ({ type: 'CLOSE_ERROR' });\n\n/**\n * load coupon feedback\n * @param {string} message\n */\nexport const showMessage = (message: string, variant: Variant): AppThunk => dispatch => {\n  dispatch({\n    type: 'MESSAGE',\n    message,\n    variant,\n  });\n};\n\nexport const closeMessage = (): Close => ({ type: 'CLOSE_MESSAGE' });\n\n/**\n * show error returned by apis\n * @param {string} message\n */\nexport const showResponseError = (result: ApiResponseError): AppDispatch => (dispatch: any) => {\n  if (!result.error) return;\n  showError(result.message)(dispatch);\n  \n};\n\n// --------------------------------------------------------//\n// ---------------------- Routing -------------------------//\n// --------------------------------------------------------//\n\nexport const goToHome = () => push('/');\n","export const SERVER_PORT: number = 4200;\r\n\r\nexport const projectName: string = 'my-car';\r\nexport const projectNameUpper: string = projectName.toUpperCase();\r\n\r\nexport const TOKEN_NAME: string = 'zm6Jt8h9LBq9fhGb';\r\n\r\n// ----------------------------------------------- //\r\n// -------------------- ROUTING------------------- //\r\n// ----------------------------------------------- //\r\n\r\nexport const PROD_HOSTNAME: string = 'my-car-web.herokuapp.com';\r\nexport const LOCAL_HOSTNAME: string = 'localhost';\r\nexport const LOCAL_ENDPOINT_HOSTNAME: string = '127.0.0.1';\r\n\r\nexport const PROD_URL: string = 'https://' + PROD_HOSTNAME;\r\nexport const LOCAL_URL: string = 'http://' + LOCAL_HOSTNAME;\r\nexport const LOCAL_ENDPOINT: string = 'http://' + LOCAL_ENDPOINT_HOSTNAME + ':' + SERVER_PORT;\r\n\r\nexport const LOGIN_PATHNAME: string = '/login';\r\nexport const SIGNUP_PATHNAME: string = '/signup';\r\nexport const EDIT_PROFILE_PATHNAME: string = '/profil';","import moment from 'moment';\nimport 'moment/locale/fr';\n\nimport { TOKEN_NAME } from './constants';\n\n/* eslint-disable func-names */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n\n\n// --------------------------------------------------------------------//\n// ----------------------- Parsers/Formatter --------------------------//\n// --------------------------------------------------------------------//\n// to capitalize only first letter\nexport const capitalizeFirstLetter = (string: string): string => {\n  if (!string || typeof string !== 'string' || (string && string.trim().length === 0)) return '';\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * boolean to string\n * @param booleanValue\n * @returns {string}\n */\nexport const booleanFormatter = (booleanValue: boolean): string => booleanValue ? 'true' : 'false';\n\n/**\n * string to boolean\n * @param value\n * @returns {boolean}\n */\nexport const toBoolean = (value: any) => typeof value === 'boolean' ? value : value === 'true';\n\nexport const toDate = (momentOrDateOrString: any) => {\n  if (momentOrDateOrString == null) {\n    return undefined;\n  } if (typeof momentOrDateOrString === 'string') {\n    let [year, month, day]: any = momentOrDateOrString.split('-');\n    if (momentOrDateOrString.includes('/')) {\n      // french date DD/MM/YY\n      [day, month, year] = momentOrDateOrString.split('/');\n    }\n    return new Date(year, month - 1, day);\n  } if (moment.isMoment(momentOrDateOrString)) {\n    return momentOrDateOrString.toDate();\n  } \n  return momentOrDateOrString;\n\t\n};\nexport const toMoment = (momentOrDateOrString?: any) => {\n  if (momentOrDateOrString == null) {\n    return moment();\n  } if (moment.isMoment(momentOrDateOrString)) {\n    // ---- moment ----//\n    return momentOrDateOrString;\n  } if (typeof momentOrDateOrString === 'string') {\n    // ---- string ----//\n    return moment(momentOrDateOrString, 'YYYY-MM-DD');\n  } \n  // ---- date ----//\n  return moment(momentOrDateOrString);\n\t\n};\n\nexport const getDayName = (dateOrString: any, capitalized = true) => {\n  const date = toDate(dateOrString);\n  let day = moment(date).format('dddd');\n  capitalized && (day = capitalizeFirstLetter(day));\n  return day;\n};\n\nexport const getMonthName = (dateOrString: any, capitalized = true) => {\n  const date = toDate(dateOrString);\n  let month = moment(date).format('MMMM');\n  capitalized && (month = capitalizeFirstLetter(month));\n  return month;\n};\n\nexport const formatDate = (dateOrString: any, withDayName = true, withYear = true) => {\n  if (!dateOrString) {\n    return '';\n  }\n  const date = toDate(dateOrString);\n\n  const dayAndMonth = `${date.getDate() + (date.getDate() === 1 ? 'er' : '')  } ${  getMonthName(date, false)}`;\n\n  // ---- parts construction ----//\n  const parts = [];\n  withDayName && parts.push(getDayName(date));\n  parts.push(dayAndMonth);\n  withYear && parts.push(date.getFullYear());\n\n  return parts.join(' ');\n};\n\nexport const toIndexFormatString = (momentOrDateOrString: any) => toMoment(momentOrDateOrString).format('YYYYMMDD');\nexport const toDateFormatString = (momentOrDateOrString: any) => toMoment(momentOrDateOrString).format('YYYY-MM-DD');\nexport function getLast3Month() {\n  const last3Month = toMoment().subtract(3, 'month');\n  return toDateFormatString(last3Month);\n}\n\n\nexport const toShortDateString = (momentOrDateOrString: any, fullYear = false) => {\n  const format = fullYear ? 'DD/MM/YYYY' : 'DD/MM/YY';\n  return toMoment(momentOrDateOrString).format(format);\n};\nexport const toFrDateString = (momentOrDateOrString: any, withSlash = false) => {\n  const strFormat = withSlash ? 'DD/MM/YYYY' : 'DD MMMM YYYY';\n  return toMoment(momentOrDateOrString).format(strFormat);\n};\nexport const toFrDateTimeString = (momentOrDateOrString: any, withDoubleDots = true, withPreposition = false) => {\n  let dateTimeStr = toMoment(momentOrDateOrString).format('DD/MM/YY - HH:mm');\n  if (!withDoubleDots) {\n    dateTimeStr = dateTimeStr.replace(':', 'h');\n  }\n  if (withPreposition) {\n    dateTimeStr = dateTimeStr.replace('-', 'à');\n  }\n  return dateTimeStr;\n};\nexport const toLongDateString = (momentOrDateOrString: any) => toMoment(momentOrDateOrString).format('dddd DD MMMM YYYY');\nexport const toTimeString = (momentOrDateOrString: any) => toMoment(momentOrDateOrString).format('HH:mm');\n\n/**\n * to check if the selected date is less then limit date\n * @param {date | String} date\n * @param {date | String} [limitDate]\n */\nexport const isOutOfDate = (date: any, limitDate: any) => {\n  if (!date) return false;\n  return toDateFormatString(date) < toDateFormatString(limitDate);\n};\n\nexport const randomString = () => Math.random().toString(36).substring(2, 6) + Math.random().toString(36).substring(2, 6);\n\nexport const getFirstLetter = (str: string): string => str.charAt(0).toUpperCase();\n\n// --------------------------------------------------------------------//\n// ------------------------- normalization ----------------------------//\n// --------------------------------------------------------------------//\n/**\n * to int number\n * @param value\n * @returns {number}\n */\nexport const toInt = (value: any) => value ? parseInt(value, 10) : 0;\n\nexport const normalizeTo3Digits = (value: any): any => {\n  if (!value) return null;\n  const onlyNums = value.replace(/[^\\d]/g, '');\n  // max 3 numbers\n  if (onlyNums.length <= 3) {\n    return toInt(onlyNums);\n  }\n  const newVal = onlyNums.slice(0, 3);\n  return normalizeTo3Digits(newVal);\n};\n\n/**\n * convert string to number\n * @param {string | number} value\n * @returns {number}\n */\nexport const toNumber = (value: any) => {\n  if (!value) {\n    return 0;\n  } \n  if (typeof value === 'number') return value;\n\t\n  const onlyNums = value.replace(/[^\\d]/g, '');\n  return toInt(onlyNums);\n};\n\n/**\n * to decimal number\n * @param value\n * @param [afterComma]\n * @returns {number}\n */\nexport const toDecimal = (value: any, afterComma = 2): any => {\n  if ((!value && value !== 0) || value === 0 || value === '0.0' || value === 0.0) {\n    return 0;\n  }\t\n  if (typeof value === 'number') return parseFloat(value.toFixed(afterComma));\n\t\n  // replace ',' to '.'\n  const str = value.includes(',') ? value.replace(',', '.') : value;\n  const res = parseFloat(str);\n  if (!isNaN(res)) {\n    return toDecimal(res, afterComma); // to get a good format decimal\n  }\n  return 0;\n};\n\n/**\n * normalize input type number\n * @param {*} value \n */\nexport function normalizeNumber(value: any){\n  const number  =  parseInt(value, 10);\n  if (isNaN(number) || number < 1){\n    return 0;\n  }\n  return number;\n}\n\n/**\n * format input type number\n * @param {*} value \n */\nexport function formatNumber(value: any){\n  const number  =  parseInt(value, 10);\n  if (isNaN(number) || number < 1){\n    return '0';\n  }\n  return number;\n}\n\n/**\n * get french format for decimal\n * @param price\n * @param currency\n * @returns {string} like 78,90\n */\nexport function toFrFormatStrWithComma(price: any, currency = '€') {\n  if (!price) return '';\n  const priceStr = typeof price === 'number' ? price.toFixed(2) : price;\n  const parts = priceStr.split('.');\n  if (parts.length > 1) {\n\n    const partsOne = parts[1] === '00' ? '' : parts[1];\n    // add '0' at the end if one digit into centime\n    const formattedPartsOne = partsOne.length === 1 ? `${partsOne  }0` : partsOne;\n    return `${parts[0] + (formattedPartsOne.length ? ',' : '') + formattedPartsOne  } ${  currency}`;\n  } \n  return `${price  } ${  currency}`;\n\t\n}\n\n/**\n * check if it's null ( 0, '', null, undefined, {}, [] )\n * @param item\n * @returns {boolean}\n */\nexport function isNull(item: any): any {\n  // NOTE : typeof null = 'object', typeof undefined = 'undefined'\n  // see Loose Equality Comparisons With == at ( https://www.sitepoint.com/javascript-truthy-falsy )\n  const typeOfValue = typeof item;\n  switch (typeOfValue) {\n  case 'string':\n    return item.trim() === '';\n  case 'object':\n    return Object.is(item, null) || Object.values(item).every(val => isNull(val));\n  case 'number':\n    return !item;\n  default:\n    return item == null;\n  }\n}\n\n/**\n * remove empty value\n * @param object\n * @returns {*}\n */\n/* eslint-disable no-continue */\nexport function removeEmptyValues(object: any) {\n  if (!object) return null;\n  for (const key in object) {\n    if (!object.hasOwnProperty(key)) {\n      continue;\n    }\n    const value = object[key];\n    if (isNull(value)) {\n      delete object[key];\n    }\n  }\n  return object;\n}\n\n// --------------------------------------------------------------------//\n// ----------------------------- Misc ---------------------------------//\n// --------------------------------------------------------------------//\nexport function sort(array: any[], keySupplier: any): any {\n  array.sort((item1, item2) => {\n    const item1Key = keySupplier(item1);\n    const item2Key = keySupplier(item2);\n    if (item1Key < item2Key) return -1;\n    if (item1Key > item2Key) return 1;\n    return 0;\n  });\n  return array;\n}\n\nexport function sortDesc(array: any[], keySupplier = (val: any) => val) {\n  array.sort((item1, item2) => {\n    const item1Key = keySupplier(item1);\n    const item2Key = keySupplier(item2);\n    return item2Key - item1Key;\n  });\n  return array;\n}\n\nexport const first = (array: any[]) => (array && array.length) ? array[0] : null;\n\nexport function removeIndex(array: any[], index: number) {\n  array.splice(index, 1);\n}\n\nexport function remove(array: any[], itemOrFunction: any) {\n  let i;\n  if (typeof itemOrFunction === 'function') {\n    i = array.findIndex(itemOrFunction);\n  } else {\n    i = array.indexOf(itemOrFunction);\n  }\n  if (i !== -1) {\n    removeIndex(array, i);\n    return true;\n  }\n  return false;\n}\n\nexport function insert(array: any[], index: number, item: any) {\n  array.splice(index, 0, item);\n}\n\nexport const clone = (instance: any) => Object.assign(Object.create(instance), instance);\n\n/**\n * @param object\n * @param {array|Set} names\n * @returns {*}\n */\nexport const filter = (object: any, names: any) => Object.keys(object)\n  .filter((key: any) => names.has ? names.has(key) : names.includes(key))\n  .reduce((obj: any, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n\n/**\n * other functions at http://2ality.com/2014/10/es6-promises-api.html\n * @param ms\n * @returns {Promise}\n */\nexport const delay = (ms: any) => new Promise(resolve => {\n  setTimeout(resolve, ms);\n});\n\n// to capitalize all first letter of each word\nexport function capitalizeCase(string: string) {\n  if (!string) {\n    return '';\n  }\n  string = string.trim(); // important\n  if (!string.length) {\n    return '';\n  }\n  return string.toLowerCase().split(' ').map(word =>\n    word[0].toUpperCase() + word.substr(1),\n  ).join(' ');\n}\n// to uppercase\nexport function uppercase(str: any) {\n  if (!str || typeof str !== 'string') return '';\n  return str.toUpperCase();\n}\n// to lowercase\nexport function lowercase(str: any) {\n  if (!str || typeof str !== 'string') return '';\n  return str.toLowerCase();\n}\n\nexport function isIncluded(itemOrStr: any, text: string) {\n  if (!itemOrStr || !text) return false;\n  return itemOrStr.toString().toLowerCase().includes(text.toLowerCase());\n}\n\nexport function getKeyValue(object: any, value: any) {\n  if (!object) return value;\n  let keyValue = value;\n  Object.keys(object).forEach(key => {\n    if (object[key].toLowerCase() === value.toLowerCase()) {\n      keyValue = key;\n    }\n  });\n  return keyValue;\n}\n\nexport function shallowEquals(a: any, b: any) {\n  for (const i in a) if (!(i in b)) return false;\n  for (const i in b) if (a[i] !== b[i]) return false;\n  return true;\n}\n\n/**\n * check if text is empty or null\n * @param string\n * @returns {boolean}\n */\nexport function isTextEmpty(string: any) {\n  if (string) {\n    string = string.trim();\n    return !string.length;\n  } \n  return true;\n\t\n}\n\n/**\n * get the token from LocalStorage\n * @returns {string}\n */\nexport const getTokenName = (): string => {\n  return 'token-' + TOKEN_NAME;\n}\n\n\n// --------------------------------------------//\n// ------------------- Forms ------------------//\n// --------------------------------------------//\n\n// ----- email validation -----//\nexport const regexEmail = new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\nexport const isValidEmail = (email: string) => email.match(regexEmail);\n","import { RootState, AppDispatch } from '../store';\nimport { UserResponse } from '../types/auth';\nimport { User } from '../types/user';\nimport { LOCAL_ENDPOINT, LOCAL_HOSTNAME, PROD_URL } from '../utils/constants';\nimport { getFirstLetter } from '../utils/utils';\nimport { showError } from './app';\n\n\n/**\n * returns a thunk\n * @param thunkOrPromise (signature if thunk: (dispatch : func, getState : func) : Promise)\n * @returns {function(*=, *=): Promise<void>}\n */\nexport const actionWithLoader = (thunkOrPromise: any): any => async (dispatch: AppDispatch, getState: () => RootState) => {\n  dispatch({\n    type: 'LOADING_START',\n  });\n  try {\n    if (typeof thunkOrPromise === 'function') {\n      await thunkOrPromise(dispatch, getState);\n    } else {\n      await thunkOrPromise;\n    }\n  } catch (error) {\n    showError(error)(dispatch);\n  } finally {\n    dispatch({\n      type: 'LOADING_END',\n    });\n  }\n};\n\n/**\n * get url\n * @param {Boolean} isEndPoint\n * @returns {String}\n */\n export const getUrl = (isEndPoint = false) => {\n  // ---- LOCAL ---- //\n  if ((window as any).LOCAL) {\n    return isEndPoint ? LOCAL_ENDPOINT : `http://${LOCAL_HOSTNAME}:${(window as any).location.port}`;\n  }\n\n  // ---- PROD ---- //\n  return PROD_URL;\n}\n\n\n/**\n * Get and capitalize user name first letter (ex: tiavina => T)\n * @param {User | UserResponse} user \n * @returns \n */\nexport const getUserNameFirstLetter = (user: User | UserResponse): string => getFirstLetter(user.name);\n","import axios, { AxiosResponse } from 'axios';\r\n\r\nimport { ApiResponseError } from '../types/app';\r\nimport { SignupFormValues, LoginFormValues, SignupApiResponse, LogoutApiResponse, UserResponse, EditProfileFormValues } from '../types/auth';\r\nimport { Car, CarApiResponse, PartialCarFormValues } from '../types/car';\r\nimport { CommentFormValues } from '../types/comment';\r\nimport { retrieveUserFromLocalStorage } from './auth';\r\nimport { getUrl } from './utils';\r\n\r\n\r\nconst instance = axios.create({\r\n  baseURL: getUrl(true),\r\n});\r\n\r\n/**\r\n * set api bearer token header\r\n * @param {string} token \r\n * @returns \r\n */\r\nconst authorized = () => {\r\n\tconst user = retrieveUserFromLocalStorage();\r\n\r\n\tif (!user) return {};\r\n\treturn {\r\n\t\theaders: {\r\n\t\t\t'Authorization': `Basic ${user.token}`,\r\n\t\t},\r\n\t}\r\n}\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n\tget: (url: string, config?: any) => instance.get(url, config).then(responseBody),\r\n\tpost: (url: string, body: {}, config?: any) => instance.post(url, body, config).then(responseBody),\r\n\tput: (url: string, body: {}, config?: any) => instance.put(url, body, config).then(responseBody),\r\n\tdelete: (url: string, config?: any) => instance.delete(url, config).then(responseBody),\r\n};\r\n\r\nexport const CAR_API = {\r\n\tgetCars: async (): Promise<Car[]> => requests.get('api/cars'),\r\n\tgetCar: async (id: string): Promise<CarApiResponse> => requests.get(`api/cars/${id}`),\r\n\tcreateCar: async (body: PartialCarFormValues): Promise<CarApiResponse> => requests.post('api/cars', body),\r\n\tupdateCar: async (id: string, body: PartialCarFormValues): Promise<CarApiResponse> => requests.put(`api/cars/${id}`, body),\r\n\tdeleteCar: async (id: string): Promise<CarApiResponse> => requests.delete(`api/cars/${id}`),\r\n};\r\n\r\nexport const COMMENT_API = {\r\n\tcreateComment: (carId: string, body: CommentFormValues): Promise<CarApiResponse> => requests.post(`api/cars/${carId}/comment`, body, authorized()),\r\n\tupdateComment: (carId: string, id: string, body: CommentFormValues): Promise<CarApiResponse> => requests.put(`api/cars/${carId}/comment/${id}`, body, authorized()),\r\n\tdeleteComment: (carId: string, id: string): Promise<CarApiResponse> => requests.delete(`api/cars/${carId}/comment/${id}`, authorized()),\r\n};\r\n\r\nexport const AUTH_API = {\r\n\tsignup: (body: SignupFormValues): Promise<SignupApiResponse & ApiResponseError> => requests.post('users/signup', body),\r\n\tlogin: (body: LoginFormValues): Promise<UserResponse & ApiResponseError> => requests.post('users/login', body),\r\n\tlogout: (): Promise<LogoutApiResponse & ApiResponseError> => requests.get('users/logout', authorized()),\r\n\teditProfile: (body: EditProfileFormValues): Promise<UserResponse & ApiResponseError> => requests.put('users/profile', body, authorized()),\r\n};","import { push } from 'connected-react-router';\n\nimport { getCurrentUser } from '../reducers/app';\nimport { AppThunk, AppDispatch } from '../store';\nimport { EditProfileFormValues, LoginFormValues, SignupFormValues, UserResponse } from '../types/auth.d';\nimport { LOGIN_PATHNAME, SIGNUP_PATHNAME } from '../utils/constants';\nimport { getTokenName } from '../utils/utils';\nimport { AUTH_API } from './api';\nimport { goToHome, showMessage, showResponseError } from './app';\nimport { actionWithLoader } from './utils';\n\n\n// --------------------------------------------------------//\n// ---------------------- Routing -------------------------//\n// --------------------------------------------------------//\n\nexport const goToLogin = () => push(LOGIN_PATHNAME);\nexport const goToSignup = () => push(SIGNUP_PATHNAME);\n\n\n// --------------------------------------------------------//\n// ----------------- Token / LocalStorag ----------------- //\n// --------------------------------------------------------//\n\n/**\n * get the token from LocalStorage\n * @returns {Object}\n */\n export const retrieveUserFromLocalStorage = (): UserResponse | null => {\n   const storedUser: string | null = localStorage.getItem(getTokenName());\n\n   if (!storedUser) return null;\n\n  const user = JSON.parse(storedUser);\n  \n  return user;\n}\n\n\n/**\n * clear user into localStorage\n * @param {string} user \n */\nexport const clearUserIntoLocalStorage = () => {\n  localStorage.removeItem(getTokenName());\n}\n\n\n/**\n * update the token from localStorage\n * @param {UserResponse} user \n * @returns \n */\nexport const updateUserIntoLocalStorage = (user: UserResponse) => {\n  localStorage.setItem(getTokenName(), JSON.stringify(user));\n}\n\n\n/**\n * remove the token from the object\n * @param {UserResponse} user \n */\nconst deleteTokenFromUser = (user: UserResponse) => {\n  delete user.token; \n}\n\n\n// --------------------------------------------------------//\n// ----------------------- Actions ----------------------- //\n// --------------------------------------------------------//\n\n/**\n * save the user to store\n * @param {UserResponse} user \n * @returns \n */\nexport const loginSuccess = (): any => actionWithLoader(async (dispatch: AppDispatch, getState: any) => {\n  const currentUser = retrieveUserFromLocalStorage() || getCurrentUser(getState());\n\n  // remove the token from store\n  deleteTokenFromUser(currentUser);\n\n  dispatch({\n    type: 'LOGIN_SUCCESS',\n    user: currentUser,\n  });\n\n});\n\n\n/**\n * login the user after form validation\n * @param {LoginFormValues} values { email, password } \n * @param {string} password \n * @returns \n */\nexport const login = (values: LoginFormValues): AppThunk => \n  actionWithLoader(async (dispatch: AppDispatch, getState: any): Promise<void> => {\n    const result = await AUTH_API.login(values);\n\n    // if there are errors\n    showResponseError(result)(dispatch);\n\n    updateUserIntoLocalStorage(result);\n\n\t\tawait loginSuccess()(dispatch, getState());\n    dispatch(goToHome());\n\t});\n\n\n/**\n * signup after form validation\n * @param {SignupFormValues} values { email, password, confirmPassord } \n * @returns \n */\nexport const signup = (values: SignupFormValues): AppThunk => actionWithLoader(async (dispatch: AppDispatch) => {\n  const result = await AUTH_API.signup(values);\n\n  // if there are errors\n  showResponseError(result)(dispatch);\n\n  dispatch({\n    type: 'LOGOUT_SUCCESS',\n  });\n  \n  dispatch(goToHome());\n  dispatch(showMessage('Votre compte a été enregisrté avec succès', 'success'));\n});\n\n\n/**\n * logout the current user\n * @returns \n */\nexport const logout = () => actionWithLoader(async (dispatch: AppDispatch) => {\n\n  const result = await AUTH_API.logout();\n\n  // if there are errors\n  showResponseError(result)(dispatch);\n\n  // showLogin();\n  dispatch({\n    type: 'LOGOUT_SUCCESS',\n  });\n\n  clearUserIntoLocalStorage();\n  dispatch(goToLogin());\n});\n\n/**\n * signup after form validation\n * @param {EditProfileFormValues} values { email, name } \n * @returns \n */\n export const editProfile = (values: EditProfileFormValues): AppThunk => actionWithLoader(async (dispatch: AppDispatch) => {\n  const result = await AUTH_API.editProfile(values);\n\n  // if there are errors\n  showResponseError(result)(dispatch);\n\n  dispatch({\n    type: 'LOGIN_SUCCESS',\n    user: result,\n  });\n  \n  dispatch(goToHome());\n  dispatch(showMessage('Votre profile a été mis à jour avec succès', 'success'));\n});","import { Helmet } from 'react-helmet-async';\r\n\r\nimport { projectNameUpper } from '../utils/constants';\r\n\r\ntype Props = { title: string; };\r\n\r\nconst BrowserPageDetails = ({ title }: Props) => {\r\n  return (\r\n    <Helmet>\r\n      <title>\r\n        {projectNameUpper}\r\n        -\r\n        {title}\r\n      </title>\r\n    </Helmet>\r\n  );\r\n};\r\n\r\nexport default BrowserPageDetails;","import { ReactNode, SyntheticEvent } from 'react';\r\n\r\nimport { Link as MUILink, Typography } from '@material-ui/core';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\nimport { getUrl } from '../actions/utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    link: {\r\n      textDecoration: 'underline',\r\n    },\r\n    leftText: {\r\n      marginLeft: theme.spacing(0.5),\r\n    },\r\n    rightText: {\r\n      marginRight: theme.spacing(0.5),\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = { \r\n  textBefore?: string; \r\n  textAfter?: string; \r\n  content?: string | ReactNode;\r\n  href?: string; // 'eg /login'\r\n  rootClassName?: string;\r\n  className?: string;\r\n  isPreventDefault?: boolean;\r\n  children?: ReactNode;\r\n}\r\nconst Link = ({\r\n  textBefore,\r\n  textAfter,\r\n  content,\r\n  href,\r\n  rootClassName,\r\n  className,\r\n  isPreventDefault,\r\n  children,\r\n}: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const preventDefault = (event: SyntheticEvent) => event.preventDefault();\r\n\r\n  const link = (\r\n    <MUILink \r\n      href={getUrl() + href} \r\n      onClick={isPreventDefault ? preventDefault: undefined} \r\n      className={clsx(\r\n        textBefore ? classes.leftText: undefined,\r\n        textAfter ? classes.rightText: undefined,\r\n        classes.link,\r\n        className,\r\n      )}\r\n    >\r\n      {children || content}\r\n    </MUILink>\r\n  );\r\n\r\n  // for content other than a text, eg: img, div\r\n  if (children) return link;\r\n\r\n  return (\r\n    <Typography className={rootClassName}>\r\n      {textBefore}\r\n      {link}\r\n      {textAfter}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default Link;","import { ReactNode } from 'react';\r\n\r\nimport { makeStyles, Theme } from '@material-ui/core';\r\nimport MUIButton from '@material-ui/core/Button';\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    button: {\r\n      textTransform: 'inherit',\r\n      fontWeight: 'normal',\r\n      borderRadius: 4,\r\n    },\r\n    outlined: {\r\n      borderColor: '#e4e5e6',\r\n    },\r\n    outlinedError: {\r\n      borderColor: theme.palette.error.main,\r\n      color: theme.palette.error.main,\r\n      opacity: 0.8,\r\n      '&:hover': {\r\n        opacity: 1,\r\n      },\r\n    },\r\n  }));\r\n\r\ntype ButtonProps = {\r\n  variant?: 'contained' | 'outlined' | 'text';\r\n  color?: 'primary' | 'secondary' | 'default';\r\n  disabled?: boolean;\r\n  text?: string;\r\n  className?: string;\r\n  onClick?: () => void;\r\n  error?: boolean;\r\n  classes?: any;\r\n  startIcon?: ReactNode;\r\n  type?: any;\r\n  fullWidth?: boolean;\r\n};\r\n\r\nconst Button = ({\r\n  variant,\r\n  color,\r\n  disabled,\r\n  text,\r\n  className,\r\n  onClick,\r\n  error,\r\n  classes,\r\n  startIcon,\r\n  type,\r\n  fullWidth,\r\n}: ButtonProps) => {\r\n  const muiClasses = useStyles();\r\n\r\n  return (\r\n    <MUIButton\r\n      type={type}\r\n      variant={variant}\r\n      color={color}\r\n      disabled={disabled}\r\n      fullWidth={fullWidth}\r\n      className={clsx(className, muiClasses.button)}\r\n      classes={{\r\n        ...classes, \r\n        outlined: clsx(muiClasses.outlined, error && muiClasses.outlinedError),\r\n      }}\r\n      onClick={onClick}\r\n      startIcon={startIcon}\r\n    >\r\n       {text}\r\n    </MUIButton>\r\n  );\r\n};\r\n\r\nexport default Button;","import { makeStyles, Theme } from '@material-ui/core';\nimport clsx from 'clsx';\n\nimport Button from '../Button';\n\nconst useStyles = makeStyles((theme: Theme) =>({\n  submitButton: {\n    marginTop: theme.spacing(2),\n    fontSize: 18,\n  },\n}));\n\ntype Props = { \n  text: string; \n  color?: 'default' | 'primary'| 'secondary'; \n  variant?: 'contained' | 'outlined' | 'text';\n  fullWidth?: boolean;\n  className?: string;\n};\n\nconst SubmitButton = ({ \n  text, \n  color = 'primary', \n  className, \n  variant = 'contained',\n  fullWidth = true \n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Button\n      type=\"submit\"\n      className={clsx(className, classes.submitButton)}\n      color={color}\n      text={text}\n      variant={variant}\n      fullWidth={fullWidth}\n    />\n  );\n};\n\nexport default SubmitButton;","import { FormLabel, FormControl , TextField , Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme: Theme) =>({\n  label: {\n    marginBottom: theme.spacing(1),\n    fontWeight: 500,\n  },\n  asterix: {\n    color: 'red',\n  },\n}));\n\ntype Props = {\n  name: string;\n  label?: string;\n  rootClassName?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  options?: any;\n  register: any;\n  defaultValue?: string;\n  type?: any;\n  errors?: any;\n  errorMessage?: string;\n  required?: boolean;\n  fullWidth?: boolean;\n  placeholder?: string;\n  variant?: 'filled' | 'outlined' | 'standard';\n};\n\nconst FormField = ({\n  label,\n  name,\n  rootClassName,\n  labelClassName,\n  inputClassName,\n  options,\n  type = 'text',\n  errorMessage,\n  errors,\n  register,\n  required = false,\n  fullWidth = true,\n  variant = 'outlined',\n  placeholder,\n  defaultValue,\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <FormControl margin=\"normal\" fullWidth={fullWidth} classes={{ root: rootClassName }}>\n      {label && (\n        <FormLabel classes={{ root: clsx(labelClassName, classes.label) }}>\n          {label} \n          {required && <span className={classes.asterix}> *</span>}\n        </FormLabel> \n      )}\n\n      <TextField\n        className={inputClassName}\n        type={type}\n        fullWidth={fullWidth}\n        variant={variant}\n        placeholder={placeholder}\n        defaultValue={defaultValue}\n        {...register(name, { ...options, required })}\n      />\n      {errors[name] && (\n        <span className={classes.asterix}>\n          {errorMessage}\n        </span>\n      )}\n    </FormControl>\n  );\n};\n\nexport default FormField;\n","import { useForm, SubmitHandler } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { login } from '../../actions/auth';\nimport SubmitButton from '../../components/buttons/SubmitButton';\nimport FormField from '../../components/form/FormField';\nimport { LoginFormValues } from '../../types/auth';\n\nconst LoginForm = () => {\n\tconst dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<LoginFormValues>();\n\n  const onSubmit: SubmitHandler<LoginFormValues> = (values: LoginFormValues) => {\n    dispatch(login(values));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<FormField \n\t\t\t\tregister={register}\n\t\t\t\terrors={errors} \n\t\t\t\ttype=\"email\"\n\t\t\t\tname=\"email\" \n\t\t\t\tlabel=\"Email\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<FormField \n\t\t\t\tregister={register} \n\t\t\t\terrors={errors} \n\t\t\t\ttype=\"password\"\n\t\t\t\tname=\"password\" \n\t\t\t\tlabel=\"Mot de passe\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<SubmitButton text=\"Connexion\" />\n    </form>\n  );\n}\n\nexport default LoginForm;\n","import { useForm, SubmitHandler } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { signup } from '../../actions/auth';\nimport SubmitButton from '../../components/buttons/SubmitButton';\nimport FormField from '../../components/form/FormField';\nimport { SignupFormValues } from '../../types/auth';\n\nconst SignupForm = () => {\n\tconst dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<SignupFormValues>();\n\n  const onSubmit: SubmitHandler<SignupFormValues> = (values: SignupFormValues) => {\n    dispatch(signup(values));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<FormField \n\t\t\t\tregister={register}\n\t\t\t\terrors={errors} \n\t\t\t\ttype=\"email\"\n\t\t\t\tname=\"email\" \n\t\t\t\tlabel=\"Email\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<FormField \n\t\t\t\tregister={register}\n\t\t\t\terrors={errors} \n\t\t\t\tname=\"name\" \n\t\t\t\tlabel=\"Nom\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<FormField \n\t\t\t\tregister={register} \n\t\t\t\terrors={errors} \n\t\t\t\ttype=\"password\"\n\t\t\t\tname=\"password\" \n\t\t\t\tlabel=\"Mot de passe\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<FormField \n\t\t\t\tregister={register} \n\t\t\t\terrors={errors} \n\t\t\t\ttype=\"password\"\n\t\t\t\tname=\"confirmPassword\" \n\t\t\t\tlabel=\"Confirmer mot de passe\"\n\t\t\t\trequired\n\t\t\t/>\n\n\t\t\t<SubmitButton text=\"Créer le compte\" />\n    </form>\n  );\n}\n\nexport default SignupForm;\n","import { ReactNode, useEffect, useMemo } from 'react';\n\nimport { Box, FormHelperText, Theme } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\n\nimport { goToHome } from '../../actions/app';\nimport { retrieveUserFromLocalStorage } from '../../actions/auth';\nimport BrowserPageDetails from '../../components/BrowserPageDetails';\nimport Link from '../../components/Link';\nimport { useIsActualPage } from '../../hooks/useIsActualPage';\nimport { getError } from '../../reducers/app';\nimport { LOGIN_PATHNAME, SIGNUP_PATHNAME } from '../../utils/constants';\nimport LoginForm from './LoginForm';\nimport SignupForm from './SignupForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t\theight: '100vh'\n  },\n\tcard: {\n\t\tminWidth: 300,\n\t\tmaxWidth: '35vw',\n\t\tboxShadow: '0 0 15px 0 rgba(6,48,62,0.05)',\n\t\tborderRadius: 8,\n\t\tpadding: `${theme.spacing(3)}px ${theme.spacing(9)}px`,\n\t},\n\tbutton: {\n\t\twidth: '100%',\n\t},\n\tsecondaryButton: {\n\t\tmarginTop: theme.spacing(1),\n\t},\n\tactions: {\n\t\tcomposes: 'flexRow',\n\t},\n}));\n\ninterface AuthPage { \n\tbrowserTitle: string;\n\tpageTitle: string;\n\tform: ReactNode;\n\tlabelLink: string;\n\tlink: string;\n};\n\nconst Auth = () => {\n  const classes = useStyles();\n\n\t// dispatch\n\tconst dispatch = useDispatch();\n\n\tconst location = useLocation();\n\n\t// check the route (url) path if it contain login\n\tconst isLoginPage = useIsActualPage(LOGIN_PATHNAME);\n\n\tconst error = useSelector(getError);\n\n\t// if the user is logged in, redirect to the home page\n\tuseEffect(() => {\n\t\tconst user = retrieveUserFromLocalStorage();\n\t\tif (!user) return;\n\t\tdispatch(goToHome());\n\t}, [dispatch])\n\n\n\t// it may be login or signup page\n\tconst auth: AuthPage = useMemo(() => {\n\t\t\n\t\tconst signupTitle: string = 'Créer un compte';\n\t\tlet browserTitle: string = signupTitle;\n\t\tlet pageTitle: string = signupTitle;\n\t\tlet link: string = LOGIN_PATHNAME;\n\t\tlet labelLink: string = 'Déjà un compte ?';\n\t\tlet form: ReactNode = <SignupForm />;\n\n\t\tif (isLoginPage) {\n\t\t\tbrowserTitle = 'Se connecter';\n\t\t\tpageTitle = 'Connexion';\n\t\t\tlink = SIGNUP_PATHNAME;\n\t\t\tlabelLink = 'Pas encore de compte ?';\n\t\t\tform = <LoginForm />;\n\t\t}\n\n\t\treturn {\n\t\t\tbrowserTitle,\n\t\t\tpageTitle,\n\t\t\tform,\n\t\t\tlink,\n\t\t\tlabelLink,\n\t\t}\n\t}, [location, isLoginPage])\n\n  return (\n\t\t<>\n\t\t\t{/* ---------- the browser title ---------- */}\n\t\t\t<BrowserPageDetails title={auth.browserTitle} />\n\t\t\t\n\t\t\t{/* ---------- card form container ---------- */}\n\t\t\t<Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" className={classes.root}>\n\t\t\t\t<Card className={classes.card}>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t\t\t\t{auth.pageTitle}\n\t\t\t\t\t\t\t\t</Typography>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t{/* ----- Form ---- */}\n\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t{error && (\n\t\t\t\t\t\t\t\t\t<FormHelperText error>\n\t\t\t\t\t\t\t\t\t\t{ error }\n\t\t\t\t\t\t\t\t\t</FormHelperText>\n\t\t\t\t\t\t\t\t)} \n\t\t\t\t\t\t\t\t{auth.form}\n\t\t\t\t\t\t\t</Box>\n\n\t\t\t\t\t\t\t{/* ----- Link ----- */}\n\t\t\t\t\t\t\t<Box mt={5}>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tcontent={auth.labelLink}\n\t\t\t\t\t\t\t\t\thref={auth.link}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t</Box>\n\t\t</>\n  );\n};\n\nexport default Auth;\n","import { useMemo } from 'react';\r\n\r\nimport { useLocation } from 'react-router';\r\n\r\nexport const useIsActualPage = (pathname: string): boolean => {\r\n\r\n\tconst location = useLocation();\r\n\r\n\tconst isActualPage: boolean = useMemo((): boolean => {\r\n\t\treturn location.pathname === pathname;\r\n\t}, [location])\r\n\r\n  return isActualPage;\r\n};","import { ReactNode } from 'react';\n\nimport { Box } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { grey } from '@material-ui/core/colors';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport clsx from 'clsx';\nimport { push } from 'connected-react-router';\nimport { useDispatch } from 'react-redux';\n\nimport Button from './Button';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '45vw',\n    boxShadow: '0 0 15px 0 rgba(6,48,62,0.05)',\n  },\n  header: {\n    width: '100%',\n    padding: 20,\n    borderBottom: grey[500],\n    composes: 'flexRow center',\n  },\n  content: {\n    composes: 'stretchSelf',\n  },\n  actions: {\n    borderTop: grey[600],\n    width: '100%',\n    padding: '4px 10px',\n    justifyContent: ({ actions }: any) => actions ? 'flex-start' : 'flex-end',\n  },\n  action: {\n    marginTop: 0,\n    marginLeft: 0,\n  },\n  buttons: {\n    composes: 'flexRow flex1',\n  },\n  okBtn: {\n    marginLeft: 10,\n  },\n  fullScreenContainer: {\n    composes: 'flexColumn self flex1 stretchSelf',\n    height: 'calc(100vh - 50px)',\n  },\n  fullScreenContent: {\n    composes: 'flex1 overflowAuto',\n    maxHeight: 'unset !important',\n  },\n  actionButtonLeft: {\n    order: -1,\n    marginRight: 20,\n    marginLeft: 0,\n  },\n});\n\ntype Props = {\n\televation?: number;\n\trootClassName?: string;\n\ttitle?: string;\n\ttitleClassName?: string;\n\tcontent: ReactNode;\n\totherHeaderActionButtons?: ReactNode;\n\tcontentClassName?: string;\n\twithActionButtons?: boolean;\n\tactions?: ReactNode;\n\tactionClassName?: string;\n\tokAction?: any;\n\tcancelAction?: any;\n\tokLabel?: string;\n\tcancelLabel?: string;\n\tfullScreen?: boolean;\n  onHeaderPrimaryClick?: () => void;\n  headerPrimaryLabel?: string;\n  okBtnClassName?: string;\n  okBtnVariant?: 'text' | 'outlined' | 'contained' | undefined;\n  actionButtonPosition?: 'left' | 'right',\n};\n\nconst CustomCard = ({\n  elevation = 3, rootClassName, fullScreen = false,\n  title, titleClassName,\n  content, contentClassName,\n  okAction, okLabel = 'Valider',\n  actions, cancelAction,\n  otherHeaderActionButtons,\n  withActionButtons,\n  actionClassName,\n  actionButtonPosition = 'right',\n  cancelLabel = 'Annuler',\n  onHeaderPrimaryClick,\n  headerPrimaryLabel,\n  okBtnClassName,\n  okBtnVariant = 'contained',\n}: Props) => {\n\n  // styles\n  const classes = useStyles({ actions });\n\n  const dispatch = useDispatch();\n  const _goHome = () => dispatch(push('/'));\n\n  const actionItems: ReactNode = actions || (\n    <div className={classes.buttons}>\n      {cancelAction && (\n        <Button color=\"secondary\" onClick={cancelAction || _goHome} text={cancelLabel} />\n      )}\n\n      {okAction && (\n        <Button\n          color=\"primary\"\n          onClick={okAction}\n          variant={okBtnVariant}\n          classes={{ root: clsx(classes.okBtn, okBtnClassName, actionButtonPosition && classes.actionButtonLeft) }}\n          text={okLabel}\n        />\n      )} \n    </div>\n  );\n\n  return (\n    <Card\n      elevation={elevation}\n      classes={{\n        root: clsx(\n          classes.root,\n          rootClassName, {\n            [classes.fullScreenContainer]: fullScreen,\n          }),\n      }}\n    >\n      <Box px={1.5}>\n        <Button text=\"Back\" startIcon={<NavigateBeforeIcon />} />\n      </Box>\n      {/* ---- header ----*/}\n      { title && (\n        <CardHeader\n          title={(\n            <Typography variant='h5'>\n              {title}\n            </Typography>\n          )}\n          classes={{ root: clsx(classes.header, titleClassName), action: classes.action }}\n          // action={actionHeaderButtons}\n          action={(\n            <>\n              {onHeaderPrimaryClick && (\n                <Button\n                  onClick={onHeaderPrimaryClick}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  text={headerPrimaryLabel} \n                />\n              )}\n              {otherHeaderActionButtons && otherHeaderActionButtons}\n            </>\n          )}\n        />\n      )}\n\n      {/* ---- content ----*/}\n      <CardContent\n        classes={{\n          root: clsx(\n            classes.content,\n            contentClassName, {\n              [classes.fullScreenContent]: fullScreen,\n            },\n          ),\n        }}\n      >\n        {content}\n      </CardContent>\n\n      {/* ---- actions ----*/}\n      { withActionButtons && (\n        <CardActions\n          classes={{ root: clsx(classes.actions, actionClassName) }}\n        >\n          {actionItems}\n        </CardActions>\n      )}\n    </Card>\n  );\n};\n\nexport default CustomCard;","import { Box, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\n\r\nimport SubmitButton from '../../components/buttons/SubmitButton';\r\nimport FormField from '../../components/form/FormField';\r\nimport { EditProfileFormValues } from '../../types/auth';\r\nimport { User } from '../../types/user';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    input: {\r\n      backgroundColor: grey[200],\r\n      borderRadius: 25,\r\n      '& input:valid:focus': {\r\n        borderRadius: 25,\r\n        backgroundColor: grey[300],\r\n      },\r\n      '& input::placeholder': {\r\n        color: grey[900],\r\n        fontSize: 14,\r\n      },\r\n      '& input:valid + fieldset': {\r\n        borderRadius: 25,\r\n        borderWidth: 0,\r\n        color: 'blue'\r\n      },\r\n      '& input:valid:focus + fieldset': {\r\n        border: 'none',\r\n        padding: '4px !important', // override inline-style\r\n      },\r\n    },\r\n    form: {\r\n      flex: 1\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = { \r\n  onSave: (values: EditProfileFormValues) => void; \r\n  className?: string; \r\n  user: User;\r\n};\r\n\r\nconst ProfileForm = ({ onSave, className, user }: Props) => {\r\n  const classes = useStyles();\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm<EditProfileFormValues>();\r\n\r\n  const onSubmit: SubmitHandler<EditProfileFormValues> = (values: EditProfileFormValues) => {\r\n    onSave(values);\r\n    reset(values);\r\n  };\r\n  \r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" className={className}>\r\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\r\n        <FormField \r\n          register={register}\r\n          errors={errors}\r\n          label=\"Mon nom\"\r\n          name=\"name\"\r\n          rootClassName={classes.input}\r\n          defaultValue={user.name}\r\n        />\r\n\r\n        <FormField \r\n          register={register}\r\n          errors={errors} \r\n          label=\"Mon email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          rootClassName={classes.input}\r\n          defaultValue={user.email}\r\n        />\r\n\r\n        <SubmitButton text=\"Enregistrer\" />\r\n\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;\r\n","import { Box } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { editProfile } from '../../actions/auth';\nimport CustomCard from '../../components/CustomCard';\nimport { getCurrentUser } from '../../reducers/app';\nimport { EditProfileFormValues } from '../../types/auth';\nimport ProfileForm from './ProfileForm';\n\nconst EditProfile = () => {\n  const currentUser = useSelector(getCurrentUser);\n\n  const dispatch = useDispatch();\n\n  const _editProfile = (values: EditProfileFormValues) => {\n    dispatch(editProfile(values));\n  }\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <CustomCard\n        content={<ProfileForm user={currentUser} onSave={_editProfile} />}\n      />\n    </Box>\n  );\n}\n\nexport default EditProfile;","import { push } from 'connected-react-router';\n\nimport { getCar, getCars } from '../reducers/cars';\nimport { AppThunk, AppDispatch, RootState } from '../store';\nimport { Car, PartialCarFormValues } from '../types/car';\nimport { CAR_API } from './api';\nimport { showMessage, showResponseError } from './app';\nimport {  actionWithLoader  } from './utils';\n\n\n// --------------------------------------------------------//\n// --------------------- CRUD actions ---------------------//\n// --------------------------------------------------------//\n/**\n * create new Car\n * @param values\n * @returns {*}\n */\nexport const createCar = (values: PartialCarFormValues): AppThunk => {\n\n  return actionWithLoader(async (dispatch: AppDispatch, getState: () => RootState) => {\n    const cars: Car[] = getCars(getState());\n    const car = await CAR_API.createCar(values);\n\n\t\t// -------------- dispatch -------------- //\n    dispatch({\n      type: 'CAR_LOADED',\n      car,\n    });\n\n    dispatch({\n      type: 'CARS_UPDATED',\n      cars: [car, ...cars],\n    });\n\n    dispatch(showMessage(`${car.name} ajouté avec succès`, 'success'));\n  });\n};\n\n\n/**\n * delete current car\n * @param {Car} car\n * @returns {Promise<*>}\n */\nexport const deleteCar = (car: Car): AppThunk => {\n  return actionWithLoader(async (dispatch: AppDispatch, getState: () => RootState) => {\n    const cars: Car[] = getCars(getState());\n    const newCars: Car[] = cars.filter((p: Car): boolean => p !== car);\n\n    await CAR_API.deleteCar(car.id);\n\n    dispatch({\n      type: 'CARS_UPDATED', // used in cars list\n      cars: newCars,\n    });\n\n    dispatch(showMessage(`${car.name})} supprimé avec succès`, 'success'));\n  });\n};\n\n\n// ------------------------------------------------------------------- //\n// ------------------------------ THUNK ------------------------------ //\n// ------------------------------------------------------------------- //\n\n/**\n * save and update car\n * @param {Car} car\n * @param {PartialCarFormValues} values\n * @returns {Promise<*>}\n */\nexport const updateCarThunk = (car: Car, values: PartialCarFormValues): (dispatch: AppDispatch) => Promise<void> => {\n  return async (dispatch: AppDispatch): Promise<void> => {\n    const updatedCar = await CAR_API.updateCar(car.id, values);\n\n    // if there are errors\n    showResponseError(updatedCar)(dispatch);\n\n    dispatch({\n      type: 'CAR_UPDATED',\n      car,\n    });\n\n    dispatch(showMessage(`${car.name} modifié avec succès`, 'success'));\n  };\n};\n\n\n/**\n * load all cars\n * @returns {Function}\n */\nexport const loadCarsThunk = (): (dispatch: AppDispatch) => Promise<Car[]> => {\n  return async (dispatch: AppDispatch): Promise<Car[]> => {\n    const cars = await CAR_API.getCars();\n\n    if (cars && Array.isArray(cars)) {\n      dispatch({\n        type: 'CARS_LOADED',\n        cars,\n      });\n    }\n    return cars;\n  };\n};\n\n\n/**\n * load car into redux\n * @param id\n * @returns {function(*, *): Promise<*>}\n */\nexport const loadCarThunk = (id: string): (dispatch: AppDispatch, getState: () => RootState) => Promise<Car | undefined> => {\n  return async (dispatch: AppDispatch, getState: () => RootState): Promise<Car | undefined> => {\n    const currentCar: Car = getCar(getState());\n\n    if (!currentCar || currentCar.id !== id) {\n      // loading car\n      const car = await CAR_API.getCar(id);\n\n      // if there are errors\n      showResponseError(car)(dispatch);\n\n      dispatch({\n        type: 'CAR_LOADED',\n        car,\n      });\n\n      return car;\n    }\n\n    return currentCar;\n  };\n};\n\n\n// --------------------------------------------------------//\n// --------------------- WITH LOADER ----------------------//\n// --------------------------------------------------------//\n\n/**\n * update current car\n * @param {Car} car\n * @param {PartialCarFormValues} values\n * @returns {*}\n */\nexport const updateCar = (car: Car, values: PartialCarFormValues): AppThunk => {\n  return actionWithLoader(async (dispatch: AppDispatch) => {\n    await updateCarThunk(car, values)(dispatch);\n  });\n};\n\n\n/**\n * load all cars\n * @returns {Function}\n */\nexport const loadCars = (): (dispatch: AppDispatch) => Promise<void> => {\n  return actionWithLoader(async (dispatch: AppDispatch): Promise<void> => {\n\n    await loadCarsThunk()(dispatch);\n  });\n};\n\n\n/**\n * load a car\n * @param {string} id \n * @returns \n */\nexport const loadCar = (id: string): AppThunk => {\n return actionWithLoader(async (dispatch: AppDispatch, getState: () => RootState) => {\n   await loadCarThunk(id)(dispatch, getState);\n });\n};\n\n\n\n// --------------------------------------------------------//\n// ---------------------- Routing -------------------------//\n// --------------------------------------------------------//\n\nexport const goToCars = () => push('/voitures');\nexport const goToCarCreation = () => push('/voiture/ajouter');\nexport const goToCarEdition = (id: string) => push('/voiture/modifier/' + id);\nexport const goToCarPreview = (id: string) => push('/voiture/' + id);","import { loadCars } from '../actions/cars';\r\nimport { getCars } from '../reducers/cars';\r\nimport { Car } from '../types/car';\r\nimport { useLoadData } from './useLoadData';\r\n\r\nexport const useLoadCars = (): Car[] => {\r\n\r\n  // get car list\r\n  const cars: Car[] = useLoadData({\r\n    getData: getCars,\r\n    loadData: loadCars,\r\n  });\r\n\r\n  return cars;\r\n}","import { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ninterface DataInput {\r\n  getData: any;\r\n  loadData: any;\r\n}\r\nexport const useLoadData = ({ getData, loadData }: DataInput): any => {\r\n  const dispatch = useDispatch();\r\n  const data = useSelector(getData);\r\n\r\n  useEffect(() => {\r\n    dispatch(loadData());\r\n  }, [dispatch])\r\n\r\n  return data;\r\n}","import { getCars } from '../reducers/cars';\nimport { AppThunk, AppDispatch, RootState } from '../store';\nimport { Car } from '../types/car';\nimport { CommentFormValues } from '../types/comment';\nimport { COMMENT_API } from './api';\nimport { showResponseError } from './app';\nimport {  actionWithLoader  } from './utils';\n\n\n// --------------------------------------------------------//\n// --------------------- CRUD actions ---------------------//\n// --------------------------------------------------------//\n/**\n * create new Comment\n * @param {string} carId\n * @param {CommentFormValues} values\n * @returns {*}\n */\nexport const createComment = (carId: string, values: CommentFormValues): AppThunk => {\n\n  return actionWithLoader(async (dispatch: AppDispatch, getState: () => RootState) => {\n    const cars: Car[] = getCars(getState());\n    const car = await COMMENT_API.createComment(carId, values);\n\n\t\t// -------------- dispatch -------------- //\n    dispatch({\n      type: 'CAR_LOADED',\n      car,\n    });\n\n    dispatch({\n      type: 'CARS_UPDATED',\n      cars: [car, ...cars],\n    });\n\n  });\n};\n\n\n// ------------------------------------------------------------------- //\n// ------------------------------ THUNK ------------------------------ //\n// ------------------------------------------------------------------- //\n\n/**\n * update a car's comment\n * @param {Car} car\n * @param {string} id\n * @param {CommentFormValues} body\n * @returns {Promise<*>}\n */\nexport const updateCommentThunk = (car: Car, id: string, body: CommentFormValues): (dispatch: AppDispatch) => Promise<void> => {\n  return async (dispatch: AppDispatch): Promise<void> => {\n    const updatedCar = await COMMENT_API.updateComment(car.id, id, body);\n\n    // if there are errors\n    showResponseError(updatedCar)(dispatch);\n\n    dispatch({\n      type: 'CAR_UPDATED',\n      car,\n    });\n\n  };\n};\n\n\n/**\n * update a car's comment\n * @param {Car} car\n * @param {string} id\n * @param {CommentFormValues} body\n * @returns {Promise<*>}\n */\n export const deleteCommentThunk = (car: Car, id: string): (dispatch: AppDispatch, getState: () => RootState) => Promise<void> => {\n  return async (dispatch: AppDispatch, getState: () => RootState): Promise<void> => {\n    const cars: Car[] = getCars(getState());\n    const newCars: Car[] = cars.filter((p: Car): boolean => p !== car);\n\n    await COMMENT_API.deleteComment(car.id, id);\n\n    dispatch({\n      type: 'CARS_UPDATED', // used in cars list\n      cars: newCars,\n    });\n  };\n};\n\n\n\n// --------------------------------------------------------//\n// --------------------- WITH LOADER ----------------------//\n// --------------------------------------------------------//\n\n/**\n * update a car's comment\n * @param {Car} car\n * @param {string} id\n * @param {CommentFormValues} values\n * @returns {Promise<*>}\n */\nexport const updateComment = (car: Car, id: string, values: CommentFormValues): AppThunk => {\n  return actionWithLoader(async (dispatch: AppDispatch) => {\n    await updateCommentThunk(car, id, values)(dispatch);\n  });\n};\n\n/**\n * delete a comment\n * @param {Car} car\n * @param {string} id\n * @returns {Promise<*>}\n */\n export const deleteComment = (car: Car, id: string): AppThunk => {\n  return actionWithLoader(async (dispatch: AppDispatch, getState: () => RootState) => {\n    await deleteCommentThunk(car, id)(dispatch, getState);\n  });\n};","import { ReactNode } from 'react';\r\n\r\nimport { Box } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\n\r\ntype Props = { \r\n  content: string | ReactNode; \r\n  className?: string; \r\n  size?: number;\r\n  fontSize?: number; \r\n};\r\n\r\ntype StyleProps = Pick<Props, 'size' | 'fontSize'>;\r\n\r\nconst useStyles = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      backgroundColor: '#BDBDBD',\r\n      borderRadius: '50%',\r\n      color: '#fff',\r\n      width: ({ size }: StyleProps) => size,\r\n      height: ({ size }: StyleProps) => size,\r\n      textTransform: 'uppercase',\r\n      fontFamily: 'sans-serif',\r\n      fontSize: ({ fontSize }: StyleProps) => fontSize,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Avatar = ({ content, className, size = 40, fontSize= 18 }: Props) => {\r\n  const classes = useStyles({ size, fontSize });\r\n\r\n  return (\r\n     <Box \r\n      className={clsx(classes.root, className)} \r\n      display=\"flex\" \r\n      justifyContent=\"center\" \r\n      alignItems=\"center\"\r\n    >\r\n       {content}\r\n     </Box>\r\n  );\r\n}\r\n\r\nexport default Avatar;","import { Box, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\n\r\nimport { getUserNameFirstLetter } from '../../actions/utils';\r\nimport Avatar from '../../components/Avatar';\r\nimport FormField from '../../components/form/FormField';\r\nimport { CommentFormValues } from '../../types/comment';\r\nimport { User } from '../../types/user';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    input: {\r\n      backgroundColor: grey[200],\r\n      borderRadius: 25,\r\n      '& input:valid:focus': {\r\n        borderRadius: 25,\r\n        backgroundColor: grey[300],\r\n      },\r\n      '& input::placeholder': {\r\n        color: grey[900],\r\n        fontSize: 14,\r\n      },\r\n      '& input:valid + fieldset': {\r\n        borderRadius: 25,\r\n        borderWidth: 0,\r\n        color: 'blue'\r\n      },\r\n      '& input:valid:focus + fieldset': {\r\n        border: 'none',\r\n        padding: '4px !important', // override inline-style\r\n      },\r\n    },\r\n    form: {\r\n      flex: 1\r\n    },\r\n    button: {\r\n      display: 'none',\r\n    },\r\n    avatar: {\r\n      height: 55,\r\n      width: 55,\r\n      marginTop: 5,\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = { \r\n  onSave: (values: CommentFormValues) => void; \r\n  defaultValue?: string;\r\n  className?: string; \r\n  user: User;\r\n};\r\n\r\nconst CommentForm = ({ onSave, defaultValue, className, user }: Props) => {\r\n  const classes = useStyles();\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm<CommentFormValues>();\r\n\r\n  const onSubmit: SubmitHandler<CommentFormValues> = (values: CommentFormValues) => {\r\n    onSave(values);\r\n    reset(values);\r\n  };\r\n  \r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" className={className}>\r\n      <Avatar \r\n        content={getUserNameFirstLetter(user)}\r\n        className={classes.avatar} \r\n      />\r\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\r\n        <FormField \r\n          register={register}\r\n          errors={errors} \r\n          name=\"text\"\r\n          rootClassName={classes.input}\r\n          defaultValue={defaultValue}\r\n          placeholder=\"Ecrivez un commentaire...\"\r\n        />\r\n\r\n        <input type=\"submit\" className={classes.button} />\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CommentForm;\r\n","import { useCallback, useState } from 'react';\r\n\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { useDispatch, useStore } from 'react-redux';\r\n\r\nimport { deleteCommentThunk, updateCommentThunk } from '../../actions/comments';\r\nimport { Car } from '../../types/car';\r\nimport { Comment, CommentFormValues } from '../../types/comment';\r\nimport CommentForm from './CommentForm';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      textTransform: 'initial',\r\n      fontWeight: 400,\r\n      color: theme.palette.primary.main,\r\n      padding: 0,\r\n      '&:hover': {\r\n        backgroundColor: 'transparent',\r\n        opacity: 0.9,\r\n      },\r\n    },\r\n    firstButton: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    form: {\r\n      paddingLeft: theme.spacing(8.8),\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = { \r\n  comment: Comment;\r\n  car: Car;\r\n};\r\n\r\nconst ButtonActions = ({ comment, car }: Props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const store = useStore();\r\n\r\n  const toggle = useCallback(() => setOpen(prev => !prev), [setOpen]);\r\n\r\n  const handleDelete = useCallback((id: string) => {\r\n    deleteCommentThunk(car, id)(dispatch, store.getState);\r\n  }, [car, store, dispatch]);\r\n\r\n  const handleEdit = useCallback((values: CommentFormValues) => {\r\n    updateCommentThunk(car, comment._id, values)(dispatch);\r\n    toggle();\r\n  }, [comment, toggle]);\r\n\r\n  return (\r\n    <Box mt={-3} mb={1}>\r\n      <Box display=\"flex\" justifyContent=\"flex-end\">\r\n        <Button\r\n          onClick={() => handleDelete(comment._id)} \r\n          className={clsx(classes.button, classes.firstButton)}\r\n        >\r\n          Supprimer\r\n        </Button>\r\n        <Button\r\n          onClick={toggle}\r\n          className={classes.button}\r\n        >\r\n          Modifier\r\n        </Button>\r\n      </Box>\r\n\r\n      {open && (\r\n        <CommentForm \r\n          onSave={handleEdit} \r\n          defaultValue={comment.text} \r\n          className={classes.form}\r\n          user={comment.postedBy}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ButtonActions;","import { Box } from '@material-ui/core';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { getUserNameFirstLetter } from '../../actions/utils';\r\nimport Avatar from '../../components/Avatar';\r\nimport { Comment as CommentType} from '../../types/comment';\r\n\r\nconst useStyles = makeStyles(\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n    },\r\n  }),\r\n);\r\n\r\ntype Props = { comment: CommentType };\r\nconst Comment = ({ comment }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <ListItem alignItems=\"flex-start\" key={comment._id}>\r\n          <ListItemAvatar>\r\n            <Avatar content={getUserNameFirstLetter(comment.postedBy)} />\r\n          </ListItemAvatar>\r\n          <ListItemText\r\n            primary={\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Typography\r\n                  variant=\"subtitle1\"\r\n                  className={classes.inline}\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {comment.postedBy.name}\r\n                </Typography>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"body2\"\r\n                  className={classes.inline}\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {comment.updatedAt}\r\n                </Typography>\r\n              </Box>\r\n            }\r\n            secondary={comment.text}\r\n          />\r\n        </ListItem>\r\n  );\r\n}\r\n\r\nexport default Comment;","\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport Link from '../../components/Link';\r\n\r\nconst NotConnectedMessage = () => {\r\n  return (\r\n    <Box pl={1}>\r\n      <Link\r\n        content=\"Connectez-vous\"\r\n        textAfter=\"pour pouvoir commenter cet article\"\r\n        href=\"/login\"\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NotConnectedMessage;","import { Fragment } from 'react';\r\n\r\nimport { ListSubheader } from '@material-ui/core';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getCurrentUser } from '../../reducers/app';\r\nimport { Car } from '../../types/car';\r\nimport { Comment as CommentType, CommentFormValues } from '../../types/comment';\r\nimport ButtonActions from './ButtonsAction';\r\nimport Comment from './Comment';\r\nimport CommentForm from './CommentForm';\r\nimport NotConnectedMessage from './NotLoggedInMessage';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: theme.palette.background.paper,\r\n      paddingBottom: 0,\r\n      paddingTop: theme.spacing(1),\r\n      borderTop: '1px solid ' + grey[300],\r\n    },\r\n    button: {\r\n      textTransform: 'initial',\r\n      fontWeight: 400,\r\n      color: theme.palette.primary.main,\r\n      padding: 0,\r\n      '&:hover': {\r\n        backgroundColor: 'transparent',\r\n        opacity: 0.9,\r\n      },\r\n    },\r\n    firstButton: {\r\n      marginRight: theme.spacing(1),\r\n    }\r\n  }),\r\n);\r\n\r\n\r\ntype Props = { \r\n  comments?: CommentType[]; \r\n  onAdd: (values: CommentFormValues) => void;\r\n  car: Car;\r\n};\r\n\r\nconst Comments = ({ comments, onAdd, car }: Props) => {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const currrentUser = useSelector(getCurrentUser);\r\n\r\n  return (\r\n    <List\r\n      className={classes.root}\r\n      subheader={\r\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n          Commentaires (\r\n            {comments?.length || 0}\r\n          )\r\n        </ListSubheader>\r\n      }\r\n    >\r\n      {/* --------------------------------------------------  */}\r\n      {/* ------------ comment form for creation ------------ */}\r\n      {/* --------------------------------------------------  */}\r\n      {/* only logged user can add a comment */}\r\n      {currrentUser\r\n        ? <CommentForm onSave={onAdd} user={currrentUser} />\r\n        : <NotConnectedMessage />}\r\n\r\n      {comments && comments.length > 0 && comments.map((comment: CommentType, index: number) => (\r\n        <Fragment key={comment._id}>\r\n          {/* -----------------------------------------  */}\r\n          {/* ------------ comments details ------------ */}\r\n          {/* -----------------------------------------  */}\r\n          <Comment comment={comment}  />\r\n\r\n          {/* --------------------------------------- */}\r\n          {/* ------------ button actions ----------- */}\r\n          {/* --------------------------------------- */}\r\n          {/* the current logged user only can delete and update its own comment */}\r\n          {currrentUser?.id === comment.postedBy.id && (\r\n            <ButtonActions \r\n              comment={comment} \r\n              car={car} \r\n            />\r\n          )}\r\n\r\n          {/* -------------------------------- */}\r\n          {/* ------------ divider ----------- */}\r\n          {/* -------------------------------- */}\r\n          {comments.length - 1 !== index && <Divider variant=\"inset\" component=\"li\" />}\r\n        </Fragment>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default Comments;","import { useState } from 'react';\r\n\r\nimport { Box, Theme } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { createComment } from '../../actions/comments';\r\nimport { Car as CarType } from '../../types/car';\r\nimport { CommentFormValues } from '../../types/comment';\r\nimport Comments from '../comments/Comments';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: 600,\r\n    borderRadius: 10,\r\n  },\r\n  media: {\r\n    height: 260,\r\n  },\r\n  comment: {\r\n    borderRadius: 6,\r\n  },\r\n  tag: {\r\n    paddingLeft: theme.spacing(5),\r\n    borderColor: grey[500]\r\n  }\r\n}));\r\n\r\n\r\ntype Props = { car: CarType; className?: string };\r\n\r\nconst Car = ({ car, className }: Props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggle = () => setOpen(prev => !prev);\r\n  \r\n  const addComment = (values: CommentFormValues) => {\r\n    dispatch(createComment(car.id, values));\r\n  }\r\n\r\n  return (\r\n    <Card className={clsx(classes.root, className)}>\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={car.image}\r\n        title=\"Contemplative Reptile\"\r\n      />\r\n        <CardContent style={{ paddingBottom: 10 }}>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Box>\r\n              <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n                {car.name}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {car.shortDesc}\r\n              </Typography>\r\n            </Box>\r\n            <Box \r\n              className={classes.comment}\r\n              display=\"flex\"\r\n              alignItems=\"flex-start\"\r\n            >\r\n            <Button size=\"small\" color=\"primary\" onClick={toggle}>\r\n              Commentaires (\r\n                {\r\n                  car.comments \r\n                    ? car.comments.length \r\n                    : 0\r\n                }\r\n              )\r\n            </Button>\r\n            </Box>\r\n          </Box>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" mt={2}>\r\n            {[car.year, car.distance, car.fuel, car.gearbox].map((info, index) => (\r\n                <Box\r\n                  key={index} \r\n                  borderLeft={index !== 0 ? 1: 0} \r\n                  className={index !== 0 ? classes.tag: undefined}\r\n                >\r\n                  <Typography>\r\n                    {info}\r\n                  </Typography>\r\n                </Box>\r\n            ))}\r\n          </Box>\r\n        </CardContent>\r\n        {open && (\r\n          <CardActions>\r\n            <Comments\r\n              car={car}\r\n              comments={car.comments} \r\n              onAdd={addComment} \r\n            />\r\n          </CardActions>\r\n        )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Car;","import { Box, Theme } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { useLoadCars } from '../../hooks/userLoadCars';\r\nimport { Car as CarType } from '../../types/car';\r\nimport Car from './Car';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  cars: {\r\n    margin: -theme.spacing(10),\r\n  },\r\n  car: {\r\n    margin: theme.spacing(10),\r\n  }\r\n}));\r\n\r\nconst Cars = () => {\r\n  const classes = useStyles();\r\n\r\n  // load car list\r\n  const cars = useLoadCars();\r\n\r\n  return (\r\n    <Box>\r\n      <Box className={classes.cars}>\r\n        {cars.map((car: CarType, index: number) => (\r\n          <Car car={car} key={index} className={classes.car} />\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Cars;","import { Box } from '@material-ui/core';\n\nimport Cars from './cars/Cars';\n\nconst Home = () => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <Cars />\n    </Box>\n  );\n}\n\nexport default Home;","import { useEffect } from 'react';\r\n\r\nimport { useStore } from 'react-redux';\r\n\r\nimport { logout } from '../actions/auth';\r\n\r\nconst Logout = () => {\r\n\r\n  const store = useStore();\r\n\r\n  useEffect(() => {\r\n    const deconnect = async () => {\r\n      logout()(store.dispatch, store.getState);\r\n    };\r\n\r\n    deconnect();\r\n  }, [store]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Logout;\r\n","import { Slide, useScrollTrigger } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { createStyles, fade, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { goToLogin } from '../actions/auth';\r\nimport { getUserNameFirstLetter } from '../actions/utils';\r\nimport { getCurrentUser } from '../reducers/app';\r\nimport { EDIT_PROFILE_PATHNAME } from '../utils/constants';\r\nimport Avatar from './Avatar';\r\nimport Button from './Button';\r\nimport Link from './Link';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      composes: 'stretchSelf',\r\n    },\r\n    appBar: {\r\n      backgroundColor: '#fff',\r\n      color: '#000',\r\n      paddingTop: theme.spacing(0.8),\r\n      paddingBottom: theme.spacing(0.8),\r\n      boxShadow: '0 12px 24px 0 rgb(0 0 0 / 8%)',\r\n    },\r\n    logoContainer: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    logo: {\r\n      textDecoration: 'none',\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      padding: `${theme.spacing(0.5)}px ${theme.spacing(1)}px`,\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.secondary.main, 1),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.secondary.main, 0.75),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      top: -1.6,\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '18ch',\r\n        '&:focus': {\r\n          width: '24ch',\r\n        },\r\n      },\r\n    },\r\n    loginButton: {\r\n      color: '#fff',\r\n      textDecoration: 'none',\r\n      backgroundColor: theme.palette.primary.main,\r\n      fontSize: 16,\r\n      padding: `${theme.spacing(1.2)}px ${theme.spacing(2.5)}px`,\r\n      marginLeft: theme.spacing(4),\r\n      marginRight: theme.spacing(2),\r\n      borderRadius: 8,\r\n      '&:hover': {\r\n        color: theme.palette.primary.main,\r\n        backgroundColor: '#fff'\r\n      }\r\n    },\r\n    avatarLink: {\r\n      textDecoration: 'none',\r\n      '&:hover': {\r\n        textDecoration: 'none',\r\n      }\r\n    },\r\n    avatar: {\r\n      marginLeft: theme.spacing(3),\r\n      '&:hover': {\r\n        opactity: 0.8,\r\n      }\r\n    },\r\n  }),\r\n);\r\n\r\nconst Menu = () => {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const trigger = useScrollTrigger();\r\n  const currentUser = useSelector(getCurrentUser);\r\n\r\n  const _goToLogin = () => {\r\n    dispatch(goToLogin());\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Slide appear={false} direction=\"down\" in={!trigger}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            \r\n            {/* ----------- logo ----------- */}\r\n            <Link \r\n              content=\"My Car\" \r\n              href=\"/\" \r\n              className={classes.logo} \r\n              rootClassName={classes.logoContainer}\r\n            />\r\n\r\n            {/* ----------- Search input ----------- */}\r\n            <div className={classes.search}>\r\n              <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n              </div>\r\n              <InputBase\r\n                placeholder=\"Search…\"\r\n                classes={{\r\n                  root: classes.inputRoot,\r\n                  input: classes.inputInput,\r\n                }}\r\n                inputProps={{ 'aria-label': 'search' }}\r\n              />\r\n            </div>\r\n\r\n            {/* ----------- Auth buttons ----------- */}\r\n            {!currentUser \r\n            ? (\r\n              <Button\r\n                onClick={_goToLogin}\r\n                text=\"Connexion\" \r\n                className={classes.loginButton}\r\n                startIcon={<PersonIcon />}\r\n              />\r\n            )\r\n            : (\r\n              <Link href=\"/logout\" className={classes.avatarLink}>\r\n                <Avatar \r\n                  content={getUserNameFirstLetter(currentUser)}\r\n                  className={classes.avatar}\r\n                  size={35}\r\n                />\r\n              </Link>\r\n            )}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Slide>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;","import { ElementType, ReactNode } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles({\n\tsuccess: {\n\t\tbackgroundColor: '#1FA086',\n\t},\n\terror: {\n\t\tbackgroundColor: '#fd6664',\n\t},\n\tinfo: {\n\t\tbackgroundColor: '#00bcd4',\n\t},\n\twarning: {\n\t\tbackgroundColor: '#d17d1d',\n\t},\n\ticon: {\n\t\tfontSize: 20,\n\t},\n\ticonVariant: {\n\t\topacity: 0.9,\n\t\tmarginRight: 20,\n\t},\n\tmessage: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t},\n});\n\nconst variantIcon = {\n\tsuccess: CheckCircleIcon,\n\twarning: WarningIcon,\n\terror: ErrorIcon,\n\tinfo: InfoIcon,\n};\n\ntype Props = {\n\tclassName?: string;\n\tonClose?: () => void;\n\tvariant?: any;\n\tmessage?: string | ReactNode;\n\t[x: string]: any;\n};\n\nconst SnackbarContentWrapper = ({ \n\tclassName, \n\tonClose, \n\tvariant, \n\tmessage, \n\t...other \n}: Props) => {\n\t// styles\n\tconst classes = useStyles();\n\n\tconst Icon: ElementType = (variantIcon as any)[variant];\n\n\treturn (\n\t\t<SnackbarContent\n\t\t\tclassName={clsx((classes as any)[variant], className)}\n\t\t\taria-describedby='client-snackbar'\n\t\t\tmessage={(\n\t\t\t\t<span id='client-snackbar' className={classes.message}>\n\t\t\t\t\t<Icon className={clsx(classes.icon, classes.iconVariant)} />\n\t\t\t\t\t{message}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t\taction={onClose ? \n\t\t\t\t[\n\t\t\t\t\t<IconButton key='close' aria-label='Close' color='inherit' onClick={onClose}>\n\t\t\t\t\t\t<CloseIcon className={classes.icon} />\n\t\t\t\t\t</IconButton>,\n\t\t\t\t] : undefined}\n\t\t\t{...other}\n\t\t/>\n\t);\n};\n\nexport default SnackbarContentWrapper;","import { useState, useEffect, ReactNode } from 'react';\r\n\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { closeMessage } from '../actions/app';\r\nimport BrowserPageDetails from '../components/BrowserPageDetails';\r\nimport Menu from '../components/Menu';\r\nimport SnackbarContentWrapper from '../components/SnackbarContentWrapper';\r\nimport {\r\n\tgetLoading,\r\n\tgetMessage, getMessageVariant, getTitle,\r\n} from '../reducers/app';\r\nimport { projectNameUpper } from '../utils/constants';\r\n\r\n\r\nexport const drawerWidthOpen: number = 240;\r\nexport const drawerWidthClosed: number = 70;\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tmain: {\r\n\t\tcomposes: 'flexColumn',\r\n\t},\r\n\tchildren: {\r\n\t\tcomposes: 'flexCenter flex1',\r\n\t\tpadding: 12,\r\n\t},\r\n\tbackdrop: {\r\n\t\tzIndex: theme.zIndex.drawer * 10,\r\n\t\tcolor: '#fff',\r\n\t},\r\n\tmenuButton: {\r\n\t\t'&:hover': {\r\n\t\t\tbackgroundColor: 'transparent',\r\n\t\t},\r\n\t},\r\n\tcontent: {\r\n\t\tcomposes: 'flexRow center flexCenter flex1 stretchSelf',\r\n\t\tbackgroundColor: theme.palette.secondary.main,\r\n\t\tpaddingTop: theme.spacing(8),\r\n\t\tmarginTop: 77,\r\n\t\tflexGrow: 1,\r\n\t\ttransition: theme.transitions.create(['width', 'margin'], {\r\n\t\t\teasing: theme.transitions.easing.sharp,\r\n\t\t\tduration: theme.transitions.duration.leavingScreen,\r\n\t\t}),\r\n\t},\r\n}));\r\n\r\n/* eslint-disable react/jsx-closing-tag-location */\r\ntype Props = { children: ReactNode };\r\nconst Main = ({ children }: Props) => {\r\n\t// state\r\n\tconst [backdropOpened, setBackdropOpened] = useState<boolean>(false);\r\n\r\n\t// styles\r\n\tconst classes = useStyles();\r\n\r\n\t// dispatch\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// -------- Dispatch the current user when entering the dashboard ----------- //\r\n\t// useIsAuth();\r\n\t// selectors\r\n\tconst title = useSelector(getTitle);\r\n\tconst message = useSelector(getMessage);\r\n\tconst variant = useSelector(getMessageVariant);\r\n\tconst loading = useSelector(getLoading);\r\n\t// const user = useSelector(getCurrentUser);\r\n\r\n\t// -------------------------------------//\r\n\t// ------------ backdrop ---------------//\r\n\t// -------------------------------------//\r\n\t\r\n\tconst _handleCloseBackdrop = () => {\r\n\t\tsetBackdropOpened(false);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetBackdropOpened(loading);\r\n\t\t}, 200);\r\n\r\n\t\treturn () => {\r\n\t\t\tsetBackdropOpened(false);\r\n\t\t};\r\n\t}, [loading]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* browser page detail */}\r\n\t\t\t<BrowserPageDetails title={title || projectNameUpper} />\r\n\r\n\t\t\t<main className={classes.main}>\r\n\t\t\t\t<Menu />\r\n\r\n\t\t\t\t{/* ------------ Main Content ------------ */}\r\n\t\t\t\t<div className={classes.content}>\r\n\t\t\t\t\t{ children }\r\n\t\t\t\t</div>\r\n\t\t\t</main>\r\n\r\n\t\t\t<Snackbar\r\n\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t}}\r\n\t\t\t\topen={message != null}\r\n\t\t\t\tautoHideDuration={4000}\r\n\t\t\t\tonClose={() => dispatch(closeMessage())}\r\n\t\t\t>\r\n\t\t\t\t<SnackbarContentWrapper\r\n\t\t\t\t\tvariant={variant}\r\n\t\t\t\t\tmessage={message || ''}\r\n\t\t\t\t/>\r\n\t\t\t</Snackbar>\r\n\r\n\t\t\t<Backdrop\r\n\t\t\t\tclassName={classes.backdrop}\r\n\t\t\t\topen={backdropOpened}\r\n\t\t\t\tonClick={_handleCloseBackdrop}\r\n\t\t\t>\r\n\t\t\t\t<CircularProgress color='inherit' />\r\n\t\t\t</Backdrop>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Main;","import { ElementType } from 'react';\r\n\r\nimport { Route } from 'react-router';\r\n\r\nimport Main from './containers/Main';\r\nimport { useAuth } from './hooks/useAuth';\r\n\r\ntype Props ={ component: ElementType; [x: string]: any };\r\nconst MainRoute = ({ component: Component, ...rest }: Props) => {\r\n\r\n  // save the user to the store if the user is connected\r\n  useAuth();\r\n  \r\n  return (\r\n    <Route {...rest}>\r\n      <Main>\r\n        <Component />\r\n      </Main>\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default MainRoute;","import { useEffect } from 'react';\r\n\r\nimport { useSelector, useStore } from 'react-redux';\r\n\r\nimport { loginSuccess, retrieveUserFromLocalStorage } from '../actions/auth';\r\nimport { getCurrentUser } from '../reducers/app';\r\nimport { UserResponse } from '../types/auth';\r\n\r\nexport const useAuth = () => {\r\n  const store = useStore();\r\n  const currentUser = useSelector(getCurrentUser);\r\n\r\n  // retrieve the userFrom local storage\r\n\r\n  useEffect(() => {\r\n    const data: UserResponse | null = retrieveUserFromLocalStorage();\r\n\r\n    // save the user to store\r\n    if (!currentUser && data) {\r\n      loginSuccess()(store.dispatch, store.getState);\r\n    }\r\n  }, [store, retrieveUserFromLocalStorage])\r\n}","import { Route, Switch } from 'react-router';\n\nimport Auth from './containers/auth/Auth';\nimport EditProfile from './containers/edit-profile/EditProfile';\nimport Home from './containers/Home';\nimport Logout from './containers/Logout';\nimport MainRoute from './MainRoute';\nimport { LOGIN_PATHNAME, SIGNUP_PATHNAME, EDIT_PROFILE_PATHNAME } from './utils/constants';\n\n\nconst Routes = () => {\n  return (\n      <Switch>\n        <MainRoute path=\"/\" component={Home} exact />\n        <MainRoute path={EDIT_PROFILE_PATHNAME} component={EditProfile} />\n        <Route path={LOGIN_PATHNAME} exact>\n          <Auth />\n        </Route>        \n        <Route path={SIGNUP_PATHNAME} exact>\n          <Auth />\n        </Route>  \n        <Route path=\"/logout\" component={Logout} />\n      </Switch>\n  );\n};\n\nexport default Routes;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { routerMiddleware } from 'connected-react-router';\r\nimport { createStore, applyMiddleware, Action, StoreEnhancer } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\n\r\nimport rootReducer, { history } from './reducers';\r\n\r\n// ---- middleware ----//\r\nconst middlewares = [routerMiddleware(history), thunk];\r\nconst middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\nconst enhancers = [middlewareEnhancer];\r\nconst composedEnhancers: StoreEnhancer<unknown, {}> = composeWithDevTools(...enhancers);\r\n// rehydrate state on app start\r\nconst initialState = {};\r\n// ---- store ----//\r\nconst store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\nReturnType,\r\nRootState,\r\nunknown,\r\nAction<string>\r\n>;\r\nexport type Dispatch<S> = ThunkDispatch<S, null, Action<string>>;\r\nexport type AppDispatch = Dispatch<RootState>;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport { store };\r\n\r\nif (process.env.NODE_ENV !== 'production' && (module as any).hot) {\r\n  (module as any).hot.accept('./reducers', () => store.replaceReducer(rootReducer));\r\n}","import { blue } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Main theme used everywhere\r\n * this override the default Material UI theme\r\n * see: https://material-ui.com/customization/default-theme/\r\n */\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      // Purple and green play nicely together.\r\n      main: blue[600],\r\n    },\r\n    secondary: {\r\n      // This is green.A700 as hex.\r\n      main: '#ECECEC',\r\n      // main: '#c4c4c4',\r\n    },\r\n    error: {\r\n      main: '#ff485e',\r\n    },\r\n  },\r\n});","import { createGenerateClassName, StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { create } from 'jss';\nimport preset from 'jss-preset-default';\nimport ReactDOM from 'react-dom';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Provider } from 'react-redux';\n\nimport { history } from './reducers';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\nimport { theme } from './utils/theme';\nimport './styles.css';\n\n/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\nconst render = () => {\n  const { location } = window;\n\t// LOCAL can also mean \"accessed by a remote machine (like a Mac) on the local dev network\"\n\tconst hostName = location.hostname;\n\t(window as any).LOCAL = hostName.indexOf('my-car') === -1;\n\n  const Routes = require('./Routes').default;\n  const wrapper = document.getElementById('root');\n\n  const jss = create(preset());\n\n  // very important for react-await-dialog\n  const generateClassName = createGenerateClassName();\n\n  wrapper\n      ? ReactDOM.render(\n            <Provider store={store}>\n                <HelmetProvider>\n                  <StylesProvider jss={jss} generateClassName={generateClassName}>\n                    <ThemeProvider theme={theme}>\n                      <ConnectedRouter history={history}>\n                        <Routes />\n                      </ConnectedRouter>\n                    </ThemeProvider>\n                  </StylesProvider>\n                </HelmetProvider>\n            </Provider>\n          ,\n          document.getElementById('root'),\n        )\n      : false;\n};\n\nrender();\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nif (process.env.NODE_ENV === 'development') {\n  (module as any).hot?.accept('./Routes', () => render());\n}\n\n// init();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import { RootState } from '../store';\nimport { AppState, AppAction } from '../types/app.d';\n\nimport { getData } from './index';\n\nconst INITIAL_STATE: AppState = {\n  user: null,\n  loading: false,\n  error: null,\n  variant: null,\n  message: null,\n  title: null,\n};\n\nconst appReducer = (state = INITIAL_STATE, action: AppAction): AppState => {\n  switch (action.type) {\n  case 'LOADING_START':\n    return {\n      ...state,\n      loading: true,\n    };\n  case 'LOADING_END':\n    return {\n      ...state,\n      loading: false,\n    };\n  case 'LOGIN_SUCCESS':\n    return {\n      ...state,\n      user: action.user,\n    };\n  case 'LOGOUT_SUCCESS':\n    return {\n      ...state,\n      user: null,\n    };\n  case 'ERROR':\n    return {\n      ...state,\n      error: action.message,\n    };\n  case 'CLOSE_ERROR':\n    return {\n      ...state,\n      error: null,\n    };\n  case 'MESSAGE':\n    return {\n      ...state,\n      message: action.message,\n      variant: action.variant || 'info',\n    };\n  case 'CLOSE_MESSAGE':\n    return {\n      ...state,\n      message: null,\n    };\n  default:\n    return state;\n  }\n};\n\n// ------------------------------------------------------------------//\n// --------------------------- Selectors ----------------------------//\n// ------------------------------------------------------------------//\nexport const getCurrentUser = (state: RootState, errorIfNotFound = false) => getData(state, 'app.user', errorIfNotFound && 'No current user in app');\nexport const getError = (state: RootState, errorIfNotFound = false) => getData(state, 'app.error', errorIfNotFound && 'No error in app');\nexport const getMessage = (state: RootState, errorIfNotFound = false) => getData(state, 'app.message', errorIfNotFound && 'No message in app');\nexport const getLoading = (state: RootState, errorIfNotFound = false) => getData(state, 'app.loading', errorIfNotFound && 'No action with loader in app');\nexport const getTitle = (state: RootState, errorIfNotFound = false) => getData(state, 'app.title', errorIfNotFound && 'No title in app');\nexport const getMessageVariant = (state: RootState, errorIfNotFound = false) => {\n\treturn getData(state, 'app.variant', errorIfNotFound && 'No message in app');\n};\n\nexport default appReducer;","import { Reducer } from 'react';\n\nimport { connectRouter, LocationChangeAction, RouterState } from 'connected-react-router';\nimport { History, Location, createBrowserHistory } from 'history';\nimport { combineReducers } from 'redux';\n\nimport { RootState } from '../store';\nimport appReducer from './app';\nimport carReducer from './cars';\nimport userReducer from './users';\n\nexport const history = createBrowserHistory();\n\nconst appReducers = {\n  app: appReducer, \n  cars: carReducer,\n  users: userReducer,\n};\n\nconst createRootReducer = (history: History) => combineReducers({\n  ...appReducers,\n  // router: connectRouter(history),\n  router: (connectRouter(history) as any) as Reducer<\n    RouterState<Location>,\n    LocationChangeAction<Location>\n  >,\n});\n\nconst rootReducer = createRootReducer(history);\n\nexport default rootReducer;\n\n/**\n * used by selectors\n * @param state\n * @param path\n * @param [errorMessageIfNotFound]\n * @returns {*}\n */\nexport const getData = (\n  state: RootState, \n  path: string, \n  errorMessageIfNotFound?: any,\n) => {\n  let data;\n  try {\n    if (typeof state === 'function') {\n      throw new Error('The state parameter must not be a function. The error is usually the usage of getState instead of getState(). Path is');\n    }\n    data = path.split('.').reduce((res: any, prop) => res[prop], state);\n    if (errorMessageIfNotFound && data == null) {\n      throw new Error(errorMessageIfNotFound);\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n  return data;\n};","import { RootState } from '../store';\nimport { UserAction, UserState } from '../types/user';\n\nimport { getData } from './index';\n\nconst INITIAL_STATE: UserState = {\n  user: null,\n  users: [],\n};\n\nconst userReducer = (state = INITIAL_STATE, action: UserAction): UserState => {\n  switch (action.type) {\n    case 'USER_LOADED':\n      return {\n        ...state,\n        user: action.user,\n      };\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        user: null,\n      };\n    case 'USER_UPDATED':\n      return {\n        ...state,\n        user: action.user,\n      };\n    case 'USERS_LOADED':\n      return {\n        ...state,\n        users: action.users,\n      };\n    case 'USERS_UPDATED':\n      return {\n        ...state,\n        users: action.users,\n      };\n    default:\n      return state;\n  }\n};\n\n// ------------------------------------------------------------------//\n// --------------------------- Selectors ----------------------------//\n// ------------------------------------------------------------------//\nexport const getUser = (state: RootState, errorIfNotFound = false) => getData(state, 'users.user', errorIfNotFound && 'No user data found');\nexport const getUsers = (state: RootState, errorIfNotFound = false) => getData(state, 'users.users', errorIfNotFound && 'No users data found');\n\nexport default userReducer;","import { RootState } from '../store';\nimport { CarAction, CarState } from '../types/car';\n\nimport { getData } from './index';\n\nconst INITIAL_STATE: CarState = {\n  car: null,\n  cars: [],\n  count: null,\n};\n\nconst carReducer = (state = INITIAL_STATE, action: CarAction): CarState => {\n  switch (action.type) {\n  case 'CAR_LOADED':\n    return {\n      ...state,\n      car: action.car,\n    };\n  case 'REMOVE_CAR':\n    return {\n      ...state,\n      car: null,\n    };\n  case 'CAR_UPDATED':\n    return {\n      ...state,\n      car: action.car,\n    };\n  case 'CARS_LOADED':\n    return {\n      ...state,\n      cars: action.cars,\n      count: action.count,\n    };\n  case 'CARS_UPDATED':\n    return {\n      ...state,\n      cars: action.cars,\n    };\n  default:\n    return state;\n  }\n};\n\n// ------------------------------------------------------------------//\n// --------------------------- Selectors ----------------------------//\n// ------------------------------------------------------------------//\nexport const getCar = (state: RootState, errorIfNotFound = false) => getData(state, 'cars.car', errorIfNotFound && 'No car data found');\nexport const getCars = (state: RootState, errorIfNotFound = false) => getData(state, 'cars.cars', errorIfNotFound && 'No cars data found');\nexport const getCarsCount = (state: RootState, errorIfNotFound = false) => getData(state, 'cars.count', errorIfNotFound && 'No cars count data found');\n\nexport default carReducer;"],"sourceRoot":""}